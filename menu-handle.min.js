const menuHandler={menus:[],actions:[],init(passedMenus){const self=this;Array.isArray(passedMenus)&&passedMenus.length||self.menuError("[menuHandler] [general] Initialization requires an array of menus to be passed as an argument. see documentation",1),passedMenus.forEach(function(menu){const createMenu={open:null,close:null,mobileOpen:null,mobileClose:null,activeOpen:null,activeClose:null,enterFocus:null,exitFocus:null,container:null,innerContainer:null,loop:!1,isOpen:!1,isMobile:!1,openDelay:0,closeDelay:0,openOnHover:!1,submenu:{isEnabled:!1,menuFunc:self.submenuFunc,openOnHover:!1,on:{beforeOpen:null,afterOpen:null,beforeClose:null,afterClose:null}},menuFunc:self.menuFunc,mobileBreakpoint:"667px",on:{beforeInit:null,afterInit:null,beforeOpen:null,afterOpen:null,beforeClose:null,afterClose:null}};menu.elements||self.menuError(`[menuHandler] [menu:${menu.name}] Error: menu elements object is missing`,1),self.initMenuElements(createMenu,menu.elements),self.initMenuOptions(createMenu,menu),self.checkRequiredElement(createMenu)&&self.menus.push(createMenu)}),self.menus.length||self.menuError("[menuHandler] [general] Error: no menus initialized",1),self.initMenus()},initMenuOptions(createMenu,options){const self=this;for(key in delete options.elements,options)if("on"==key)for(event in options.on)event in createMenu.on&&"function"==typeof options.on[event]&&(createMenu.on[event]=options.on[event]);else"submenu"==key?self.initSubmenuOptions(createMenu,options[key]):key in createMenu&&"isOpen"!=key&&"activeOpen"!=key&&"activeClose"!=key&&(createMenu[key]=options[key]);createMenu.name=Math.random().toString(36).substr(2)},initSubmenuOptions(createMenu,options){for(key in options)if("on"==key)for(event in options.on)event in createMenu.submenu.on&&"function"==typeof options.on[event]&&(createMenu.submenu.on[event]=options.on[event]);else key in createMenu.submenu&&(createMenu.submenu[key]=options[key])},initMenuElements(createMenu,options){const self=this;for(key in options)el=document.querySelector(options[key]),createMenu[key]=el;if(!createMenu.enterFocus&&createMenu.innerContainer){const focusable=createMenu.innerContainer.querySelectorAll('[tabindex]:not([tabindex="-1"]), button, [href], input:not([type="hidden"]) ,select, textarea'),firstFocusable=focusable[0];createMenu.enterFocus=firstFocusable}createMenu.close||(createMenu.close=createMenu.open),createMenu.exitFocus||(createMenu.exitFocus=createMenu.open),createMenu.mobileBreakpoint.includes("px")||(createMenu.mobileBreakpoint+="px"),createMenu.isMobile=window.matchMedia(`(max-width: ${createMenu.mobileBreakpoint})`).matches,self.setActiveTriggers(createMenu),window.addEventListener("resize",self.debounce(()=>{createMenu.isMobile=window.matchMedia(`(max-width: ${createMenu.mobileBreakpoint})`).matches,self.setActiveTriggers(createMenu)},20))},initMenus(){const self=this;self.menus.forEach(menu=>{menu.on.beforeInit&&menu.on.beforeInit(menu);const svgs=menu.innerContainer.querySelectorAll("svg"),images=menu.innerContainer.querySelectorAll("img");svgs.forEach(el=>{el.getAttribute("role")||el.setAttribute("role","presentation"),el.getAttribute("aria-hidden")||el.setAttribute("aria-hidden",!0)}),images.forEach(el=>{el.getAttribute("role")||el.setAttribute("role","presentation"),el.getAttribute("aria-hidden")||el.setAttribute("aria-hidden",!0)}),menu.innerContainer.classList.contains("mh-hidden")||menu.innerContainer.classList.add("mh-hidden"),menu.innerContainer.getAttribute("aria-hidden")||menu.innerContainer.setAttribute("aria-hidden",!0),menu.innerContainer.getAttribute("aria-expanded")||menu.innerContainer.setAttribute("aria-expanded",!1),-1==menu.enterFocus.tabIndex&&(menu.enterFocus.tabIndex=0),menu.submenu.isEnabled&&self.initSubmenus(menu),menu.activeOpen.addEventListener("click",e=>self.toggleMenu(menu,e)),menu.activeClose.addEventListener("click",e=>self.toggleMenu(menu,e)),menu.openOnHover&&menu.activeOpen.addEventListener("mouseenter",e=>self.toggleMenu(menu,e)),menu.on.afterInit&&menu.on.afterInit(menu)}),document.addEventListener("keydown",e=>self.onInteraction(e)),document.addEventListener("click",e=>self.onInteraction(e)),window.addEventListener("scroll",self.debounce(()=>{document.documentElement.style.setProperty("--scroll-y",`${window.scrollY}px`)}),20)},initSubmenus(menu){const self=this;menu.submenu.on.beforeOpen&&menu.submenu.on.beforeOpen(menu);const submenuToggles=menu.innerContainer.querySelectorAll("[data-mh-submenu-toggle]"),submenuLists=menu.innerContainer.querySelectorAll("[data-mh-submenu-list]");submenuToggles.length||self.menuError(`[menuHandler] [menu:${menu.name}] Error: submenu toggles not found, consider disabling submenu, if submenu functionality is not being used`,1),submenuLists.length||self.menuError(`[menuHandler] [menu:${menu.name}] Error: submenu lists not found, consider disabling submenu, if submenu functionality is not being used`,1),submenuToggles.forEach(btn=>{btn.getAttribute("title")||btn.setAttribute("title","opens sub menu")}),submenuLists.forEach(list=>{list.classList.contains("mh-hidden")||list.classList.add("mh-hidden"),list.getAttribute("aria-label")||list.setAttribute("aria-label",hidden),list.getAttribute("aria-expanded")||list.setAttribute("aria-expanded",!1)}),submenuToggles.forEach(toggle=>{toggle.addEventListener("click",e=>self.toggleSubmenu(menu,submenuLists,e)),menu.submenu.openOnHover&&toggle.addEventListener("mouseenter",e=>self.toggleSubmenu(menu,submenuLists,e))})},toggleMenu(menu,e){const self=this;e&&e.preventDefault(e),"mouseenter"==e.type&&menu.isOpen||-1===self.actions.indexOf(menu.name)&&(self.actions.push(menu.name),setTimeout(()=>{menu.container.classList.contains("mh-open")||self.loopMenus(self.closeMenusOnBlur,e),document.body.classList.toggle(`mh-${menu.name}-open`),menu.container.classList.toggle("mh-open"),menu.isOpen=menu.container.classList.contains("mh-open"),menu.isOpen?setTimeout(()=>{menu.on.beforeOpen&&menu.on.beforeOpen(menu,e),menu.menuFunc(menu,e),menu.on.afterOpen&&menu.on.afterOpen(menu,e)},menu.openDelay):setTimeout(()=>{menu.on.beforeClose&&menu.on.beforeClose(menu,e),menu.menuFunc(menu,e),menu.on.afterClose&&menu.on.afterClose(menu,e)},menu.closeDelay),self.actions.splice(self.actions.indexOf(menu.name),1),self.preventBodyScroll()}))},toggleSubmenu(menu,submenuLists,e){const self=this;let toggle=e.target;toggle.dataset.mhSubmenuToggle||(toggle=toggle.closest("[data-mh-submenu-toggle]"));const submenu=[...submenuLists].filter(list=>list.dataset.mhSubmenuList===toggle.dataset.mhSubmenuToggle)[0];submenu||self.menuError(`[menuHandler] [menu:${menu.name}] Error: submenu, ${toggle.dataset.mhSubmenuToggle} not found`,1),"mouseenter"==e.type&&toggle.classList.contains("mh-open")||(toggle.classList.toggle("mh-open"),toggle.classList.contains("mh-open")?(menu.submenu.on.beforeOpen&&menu.submenu.on.beforeOpen(menu,submenu,toggle,e),menu.submenu.menuFunc(menu,submenu,toggle,e),menu.submenu.on.afterOpen&&menu.submenu.on.afterOpen(menu,submenu,toggle,e)):(menu.submenu.on.beforeClose&&menu.submenu.on.beforeClose(menu,submenu,toggle,e),menu.submenu.menuFunc(menu,submenu,toggle,e),menu.submenu.on.afterClose&&menu.submenu.on.afterClose(menu,submenu,toggle,e)))},menuFunc(menu,e){menu.isOpen?(menu.container.setAttribute("aria-expanded",!0),menu.container.setAttribute("aria-hidden",!1),menu.innerContainer.classList.remove("mh-hidden"),menu.enterFocus.focus()):(menu.container.setAttribute("aria-expanded",!1),menu.container.setAttribute("aria-hidden",!0),menu.innerContainer.classList.add("mh-hidden"))},submenuFunc(menu,submenu,toggle,e){toggle.classList.contains("mh-open")?(submenu.classList.add("mh-open"),submenu.classList.remove("mh-hidden"),submenu.setAttribute("aria-expanded",!0),submenu.setAttribute("aria-hidden",!1)):(submenu.classList.add("mh-hidden"),submenu.classList.remove("mh-open"),submenu.setAttribute("aria-expanded",!1),submenu.setAttribute("aria-hidden",!0))},checkRequiredElement(menu){const self=this,requiredElements=["open","container","innerContainer"];let status=!0;return requiredElements.forEach(el=>{menu[el]||(self.menuError(`[menuHandler] [menu:${menu.name}] Error: required ${el} element is missing`),status=!1)}),!0!==menu.loop||menu.close||(self.menuError(`[menuHandler] [menu:${menu.name}] Error: in order to use loop option elements.close is required`),status=!1),status},loopMenus(func,e){const self=this;this.menus.forEach(function(menu){func(menu,e)})},closeMenusOnEscPress(menu,e){menu.isOpen&&menuHandler.closeMenuContainer(menu)},closeMenusOnBlur(menu,e){e.target&&menu.isOpen&&e.target!=menu.activeOpen&&!menu.activeOpen.contains(e.target)&&!menu.container.contains(e.target)&&(!0===menu.loop&&"click"!==e.type&&"mouseenter"!==e.type&&menu.enterFocus?menu.enterFocus.focus():menuHandler.closeMenuContainer(menu))},closeMenuContainer(menu){const self=this;menu.activeClose?(menu.activeClose.click(),menu.exitFocus.focus()):menu.menuFunc(menu)},checkIsBusy(){const self=this;let isRunning=!1;return self.actions.forEach(action=>{self.menus.forEach(menu=>{menu.name===action&&(isRunning=!0)})}),isRunning},preventBodyScroll(){const body=document.body,self=this;let isOpen=!1;if(this.menus.forEach(menu=>{menu.isOpen&&(isOpen=!0)}),isOpen&&!body.classList.contains("prevent-body-scroll")){const scrollY=document.documentElement.style.getPropertyValue("--scroll-y");body.style.left="0",body.style.right="0",body.style.width="100%",body.style.position="fixed",body.style.top=`-${scrollY}`,body.classList.add("prevent-body-scroll")}else if(body.classList.contains("prevent-body-scroll")){const scrollY=body.style.top;body.style.top="",body.style.position="",window.scrollTo(0,-1*parseInt(scrollY||"0")),body.classList.remove("prevent-body-scroll")}},onInteraction(e){const self=this,isBusy=self.checkIsBusy();"click"!==e.type&&("keydown"!==e.type||9!=e.keyCode)||-1!==self.actions.indexOf("clicktab")||isBusy?"keydown"!==e.type||27!=e.keyCode||-1!==self.actions.indexOf("escape")||isBusy||(self.actions.push("escape"),setTimeout(()=>{self.loopMenus(self.closeMenusOnEscPress,e),self.actions.splice(self.actions.indexOf("escape"),1)})):(self.actions.push("clicktab"),setTimeout(()=>{self.loopMenus(self.closeMenusOnBlur,e),self.actions.splice(self.actions.indexOf("clicktab"),1)}))},setActiveTriggers(menu){menu.activeOpen=menu.open,menu.activeClose=menu.close,menu.isMobile&&(menu.mobileOpen&&(menu.activeOpen=menu.mobileOpen),menu.mobileClose&&(menu.activeClose=menu.mobileClose))},menuError(message,die){console.error(message),console.trace()},debounce(func,wait,immediate){var timeout;return function(){var context=this,args=arguments,later=function(){timeout=null,immediate||func.apply(context,args)},callNow=immediate&&!timeout;clearTimeout(timeout),timeout=setTimeout(later,wait),callNow&&func.apply(context,args)}}};