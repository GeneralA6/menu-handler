const menuHandler={menus:[],actions:[],init(_menus){const self=this;Array.isArray(_menus)&&_menus.length||self.menuError("[menuHandler] [general] Initialization requires an array of menus to be passed as an argument. see documentation"),_menus.forEach((function(_menu){const menuTemplate={name:null,open:null,close:null,enterFocus:null,exitFocus:null,activeOpen:null,activeClose:null,activeEnterFocus:null,activeExitFocus:null,container:null,innerContainer:null,loop:!1,isOpen:!1,isPinned:!1,openDelay:0,closeDelay:0,openOnHover:!1,transitionDelay:null,transitionDuration:null,menuFunc:self.menuFunc,pin:!1,mobile:{breakpoint:"667px",isMobile:!1,open:null,close:null,pin:!1,enterFocus:null,exitFocus:null},on:{beforeInit:null,afterInit:null,beforeOpen:null,afterOpen:null,beforeClose:null,afterClose:null},submenuOptions:{isEnabled:!1,menuFunc:self.submenuFunc,openOnHover:!1,transitionDelay:null,transitionDuration:null,on:{beforeOpen:null,afterOpen:null,beforeClose:null,afterClose:null}},submenus:{}};_menu.name?menuTemplate.name=_menu.name:menuTemplate.name=Math.random().toString(36).substr(2),_menu.elements||self.menuError(`[menuHandler] [menu:${menuTemplate.name}] Error: menu elements object is missing`),self.initMenuElements(menuTemplate,_menu.elements),_menu.mobile&&_menu.mobile.elements&&self.initMenuMobileElements(menuTemplate,_menu.mobile.elements),self.initMenuOptions(menuTemplate,_menu),menuTemplate.toggleMenu=self.toggleMenu.bind(self,menuTemplate),self.checkRequiredElement(menuTemplate)&&self.menus.push(menuTemplate)})),self.menus.length||self.menuError("[menuHandler] [general] Error: no menus initialized"),self.initMenus()},initMenuElements(menu,elements){const self=this;for(key in elements)el=document.querySelector(elements[key]),el||self.menuError(`[menuHandler] [menu:${menu.name}] Error: could not find element with ${elements[key]} selector`),menu[key]=el;if(!menu.enterFocus&&menu.innerContainer){const menuFocusables=menu.innerContainer.querySelectorAll('[tabindex]:not([tabindex="-1"]), button, a, input:not([type="hidden"]) ,select, textarea');menu.enterFocus=menuFocusables[0]}menu.close||(menu.close=menu.open),menu.exitFocus||(menu.exitFocus=menu.open)},initMenuOptions(menu,options){const self=this,ignore=["open","close","isOpen","isPinned","container","activeOpen","exitFocus","enterFocus","activeClose","innerContainer","activeExitFocus","activeEnterFocus"];for(key in options)if("elements"!=key)switch(key){case"on":self.initMenuEvents(menu,options.on);break;case"submenuOptions":self.initSubmenuOptions(menu,options[key]);break;case"mobile":self.initMenuMobileOptions(menu,options[key]);break;case"pin":case"loop":case"openOnHover":menu[key]=!!options[key]||!1;break;default:key in menu&&!ignore.includes(key)&&(menu[key]=options[key])}},initMenuMobileElements(menu,elements){const self=this;for(key in elements)el=document.querySelector(elements[key]),el||self.menuError(`[menuHandler] [menu:${menu.name}] Error: could not find element with ${elements[key]} selector`),menu.mobile[key]=el},initMenuMobileOptions(menu,options){const self=this,ignore=["open","close","isMobile","exitFocus","enterFocus"];for(key in options)if("elements"!=key)switch(key){case"breakpoint":options[key].includes("px")||(options[key]+="px"),menu.mobile[key]=options[key];break;case"pin":menu.mobile[key]=!!options[key]||!1;break;default:key in menu.mobile&&!ignore.includes(key)&&(menu.mobile[key]=options[key])}menu.mobile.isMobile=window.matchMedia(`(max-width: ${menu.mobile.breakpoint})`).matches,window.addEventListener("resize",this.debounce(()=>{menu.mobile.isMobile=window.matchMedia(`(max-width: ${menu.mobile.breakpoint})`).matches},20))},setActiveElements(menu){const self=this;this.setActiveOpen(menu),this.setActiveClose(menu),this.setActiveEnterFocus(menu),this.setActiveExitFocus(menu)},setActiveOpen(menu){const self=this;menu.activeOpen=menu.open,menu.mobile.isMobile?menu.mobile.open?(menu.activeOpen=menu.mobile.open,self.setMenuToggleEvents(menu,menu.mobile.open,menu.open)):self.setMenuToggleEvents(menu,menu.open):self.setMenuToggleEvents(menu,menu.open,menu.mobile.open)},setActiveClose(menu){const self=this;menu.activeClose=menu.close,menu.mobile.isMobile?menu.mobile.close?(menu.activeClose=menu.mobile.close,self.setMenuToggleEvents(menu,menu.mobile.close,menu.close)):self.setMenuToggleEvents(menu,menu.close):self.setMenuToggleEvents(menu,menu.close,menu.mobile.close)},setActiveEnterFocus(menu){const self=this;menu.activeEnterFocus=menu.enterFocus,menu.mobile.isMobile&&menu.mobile.enterFocus&&(menu.activeEnterFocus=menu.mobile.enterFocus)},setActiveExitFocus(menu){const self=this;menu.activeExitFocus=menu.exitFocus,menu.mobile.isMobile&&menu.mobile.exitFocus&&(menu.activeExitFocus=menu.mobile.exitFocus)},initSubmenuOptions(menu,options){for(key in options)switch(key){case"on":for(event in options.on)event in menu.submenuOptions.on&&"function"==typeof options.on[event]&&(menu.submenuOptions.on[event]=options.on[event]);break;case"isEnabled":case"openOnHover":menu.submenuOptions[key]=!!options[key]||!1;break;default:key in menu.submenuOptions&&(menu.submenuOptions[key]=options[key])}},initMenuEvents(menu,events){for(event in events)event in menu.on&&"function"==typeof events[event]&&(menu.on[event]=events[event])},initMenuPinCheck(menu){const self=this;self.toggleMenuPinned(menu),window.addEventListener("resize",self.debounce(()=>{self.toggleMenuPinned(menu)},20))},toggleMenuPinned(menu){const self=this;menu.isPinned=!1,menu.mobile.isMobile?menu.isPinned=menu.mobile.pin:menu.isPinned=menu.pin,menu.isOpen&&menu.isPinned&&self.closeMenu(menu),menu.isOpen||(menu.isPinned?(menu.container.classList.add("mh-pinned"),menu.innerContainer.classList.remove("mh-hidden"),menu.innerContainer.setAttribute("aria-hidden",!1),menu.innerContainer.setAttribute("aria-expanded",!0)):(menu.innerContainer.classList.add("mh-hidden"),menu.container.classList.remove("mh-pinned"),menu.innerContainer.setAttribute("aria-hidden",!0),menu.innerContainer.setAttribute("aria-expanded",!1)),self.loopSubmenus(menu,self.closeSubmenu))},initMenu(menu){const self=this;menu.on.beforeInit&&menu.on.beforeInit(menu),self.initMenuPinCheck(menu),self.setActiveElements(menu),window.addEventListener("resize",self.debounce(()=>{self.setActiveElements(menu)},20)),self.initMenuAccessibility(menu),menu.submenuOptions.isEnabled&&self.initSubmenus(menu),menu.on.afterInit&&menu.on.afterInit(menu)},initMenus(){const self=this;self.menus.forEach(menu=>{self.initMenu(menu)}),self.initMenuWindowEvents()},initSubmenus(menu){const self=this,submenuToggles=menu.innerContainer.querySelectorAll("[data-mh-submenu-toggle]");submenuToggles.length||self.menuError(`[menuHandler] [menu:${menu.name}] Error: submenu toggles not found, consider disabling submenu, if submenu functionality is not being used`),submenuToggles.forEach(toggle=>{const submenu={name:toggle.dataset.mhSubmenuToggle,toggle:toggle,list:null,container:null,parent:null,children:[],isOpen:!1,transitionDelay:null,transitionDuration:null};submenu.list=menu.innerContainer.querySelector(`[data-mh-submenu-list="${submenu.name}"]`),submenu.list||self.menuError(`[menuHandler] [menu:${menu.name}] Error: submenu, ${submenu.name} not found`),submenu.container=menu.innerContainer.querySelector(`[data-mh-submenu-container="${submenu.name}"]`),submenu.parent=self.getSubmenuParent(submenu.list),self.initSubmenuAccessibility(submenu),self.initSubmenuToggleEvents(menu,submenu),self.calcTransition(submenu),submenu.toggle.getAttribute("title")||submenu.toggle.setAttribute("title","opens sub menu"),submenu.parent&&menu.submenus[submenu.parent].children.push(submenu.name),menu.submenus[submenu.name]=submenu})},initMenuAccessibility(menu){const self=this,svgs=menu.innerContainer.querySelectorAll("svg"),images=menu.innerContainer.querySelectorAll("img");svgs.forEach(el=>{el.getAttribute("aria-label")||el.getAttribute("role")||el.setAttribute("role","presentation")}),images.forEach(el=>{el.getAttribute("alt")||el.getAttribute("role")||el.setAttribute("role","presentation")}),this.toggleMenuPinned(menu),["enterFocus","exitFocus"].forEach(key=>{menu[key]&&-1==menu[key].tabIndex&&(menu[key].tabIndex=0)}),["enterFocus","exitFocus"].forEach(key=>{menu.mobile[key]&&-1==menu.mobile[key].tabIndex&&(menu.mobile[key].tabIndex=0)})},initSubmenuAccessibility(submenu){submenu.list.classList.contains("mh-hidden")||submenu.list.classList.add("mh-hidden"),submenu.list.getAttribute("aria-hidden")||submenu.list.setAttribute("aria-hidden",!0),submenu.list.getAttribute("aria-expanded")||submenu.list.setAttribute("aria-expanded",!1)},initMenuWindowEvents(){const self=this;window.addEventListener("keydown",this.onInteraction.bind(this)),window.addEventListener("click",this.onInteraction.bind(this)),window.addEventListener("scroll",this.debounce(()=>{document.documentElement.style.setProperty("--scroll-y",`${window.scrollY}px`)}),20)},setMenuToggleEvents(menu,add,remove){const self=this;add&&add.addEventListener("click",menu.toggleMenu),remove&&remove.removeEventListener("click",menu.toggleMenu),menu.openOnHover&&add&&add==menu.activeOpen&&(add.addEventListener("mouseenter",menu.toggleMenu),remove&&remove.removeEventListener("mouseenter",menu.toggleMenu))},initSubmenuToggleEvents(menu,submenu){const self=this,submenuToggle=e=>self.toggleSubmenu(menu,submenu,e);submenu.toggle.addEventListener("click",submenuToggle),menu.submenuOptions.openOnHover&&submenu.toggle.addEventListener("mouseenter",submenuToggle)},toggleMenu(menu,e){const self=this;if(e&&e.preventDefault(),!menu.isOpen&&menu.isPinned)return;if(e&&"mouseenter"==e.type){if(menu.isOpen)return;if(menu.mobile.isMobile)return}if(-1!==self.actions.indexOf(menu.name))return;self.actions.push(menu.name);const transitionTimeCombined=menu.transitionDelay+menu.transitionDuration;setTimeout(()=>{menu.container.classList.contains("mh-open")||self.loopMenus(self.closeOnBlur,e),document.body.classList.toggle(`mh-${menu.name}-open`),menu.container.classList.toggle("mh-open"),menu.isOpen=menu.container.classList.contains("mh-open"),menu.isOpen?setTimeout(()=>{menu.on.beforeOpen&&menu.on.beforeOpen(menu,e),menu.menuFunc(menu,e),menu.on.afterOpen&&setTimeout(()=>menu.on.afterOpen(menu,e),1e3*transitionTimeCombined)},menu.openDelay):setTimeout(()=>{menu.on.beforeClose&&menu.on.beforeClose(menu,e),menu.menuFunc(menu,e),self.loopSubmenus(menu,self.closeSubmenu),menu.on.afterClose&&setTimeout(()=>menu.on.afterClose(menu,e),1e3*transitionTimeCombined)},menu.closeDelay),self.actions.splice(self.actions.indexOf(menu.name),1),self.preventBodyScroll()})},toggleSubmenu(menu,submenu,e){const self=this;if(e&&"mouseenter"==e.type){if(submenu.isOpen)return;if(menu.mobile.isMobile)return}const transitionTimeCombined=submenu.transitionDelay+submenu.transitionDuration,parentSubmenu=menu.submenus[submenu.parent]||null,options=menu.submenuOptions;if(!menu.isOpen&&!menu.isPinned||submenu.isOpen||parentSubmenu&&!parentSubmenu.isOpen)submenu.toggle.classList.remove("mh-open");else{if(!parentSubmenu)for(key in menu.submenus)key!=submenu.name&&!menu.submenus[key].parent&&menu.submenus[key].isOpen&&self.toggleSubmenu(menu,menu.submenus[key]);submenu.toggle.classList.add("mh-open")}submenu.isOpen=submenu.toggle.classList.contains("mh-open"),submenu.isOpen?(options.on.beforeOpen&&options.on.beforeOpen(menu,submenu,e),options.menuFunc(menu,submenu,e),options.on.afterOpen&&setTimeout(()=>options.on.afterOpen(menu,submenu,e),1e3*transitionTimeCombined)):(options.on.beforeClose&&options.on.beforeClose(menu,submenu,e),options.menuFunc(menu,submenu,e),submenu.children.forEach(child=>self.toggleSubmenu(menu,menu.submenus[child])),options.on.afterClose&&setTimeout(()=>options.on.afterClose(menu,submenu,e),1e3*transitionTimeCombined))},menuFunc(menu,e){menu.isOpen?(menu.container.setAttribute("aria-expanded",!0),menu.container.setAttribute("aria-hidden",!1),menu.innerContainer.classList.remove("mh-hidden"),menu.activeEnterFocus.focus()):(menu.container.setAttribute("aria-expanded",!1),menu.container.setAttribute("aria-hidden",!0),menu.innerContainer.classList.add("mh-hidden"))},submenuFunc(menu,submenu,e){submenu.toggle.classList.contains("mh-open")?(submenu.list.classList.remove("mh-hidden"),submenu.list.setAttribute("aria-hidden",!1),submenu.container?(submenu.container.classList.add("mh-open"),submenu.container.setAttribute("aria-expanded",!0)):(submenu.list.classList.add("mh-open"),submenu.list.setAttribute("aria-expanded",!0))):(submenu.list.classList.add("mh-hidden"),submenu.list.setAttribute("aria-hidden",!0),submenu.container?(submenu.container.classList.remove("mh-open"),submenu.container.setAttribute("aria-expanded",!1)):(submenu.list.classList.remove("mh-open"),submenu.list.setAttribute("aria-expanded",!1)))},checkRequiredElement(menu){const self=this,requiredElements=["open","container","innerContainer"];let status=!0;return requiredElements.forEach(el=>{menu[el]||(self.menuError(`[menuHandler] [menu:${menu.name}] Error: required ${el} element is missing`),status=!1)}),!0!==menu.loop||menu.close||(self.menuError(`[menuHandler] [menu:${menu.name}] Error: in order to use loop option elements.close is required`),status=!1),status},loopMenus(func,e){const self=this;self.menus.forEach((function(menu){func.call(self,menu,e)}))},loopSubmenus(menu,func){const self=this;for(key in menu.submenus)func.call(self,menu,menu.submenus[key])},closeOnEscPress(menu,e){const self=this;menu.isOpen&&!menu.isPinned?self.closeMenu(menu):menu.isPinned&&self.loopSubmenus(menu,self.closeSubmenu)},closeOnBlur(menu,e){const self=this;!menu.isOpen||menu.isPinned||!e.target||e.target==menu.activeOpen||menu.container.contains(e.target)||menu.activeOpen.contains(e.target)?self.closeSubmenuOnBlur(menu,e):self.closeMenuOnBlur(menu,e)},closeMenuOnBlur(menu,e){const self=this;!0===menu.loop&&"click"!==e.type&&"mouseenter"!==e.type&&menu.activeEnterFocus?menu.activeEnterFocus.focus():self.closeMenu(menu)},closeSubmenuOnBlur(menu,e){const self=this;if(menu.isPinned){let isAnotherOpenSubmenu=!0;for(key in menu.submenus)menu.submenus[key].isOpen&&(menu.submenus[key].toggle==e.target||menu.submenus[key].toggle.contains(e.target))&&(isAnotherOpenSubmenu=!1);isAnotherOpenSubmenu&&self.loopSubmenus(menu,self.closeSubmenu)}if(menu.isOpen&&!menu.isPinned&&e.target&&menu.container.contains(e.target)){let isFocusable=!1;const menuFocusables=menu.innerContainer.querySelectorAll('[tabindex]:not([tabindex="-1"]), button, a, input:not([type="hidden"]) ,select, textarea');menuFocusables.forEach((el,i)=>{(el==e.target||el.contains(e.target))&&(isFocusable=!0)}),isFocusable||self.loopSubmenus(menu,self.closeSubmenu)}},closeMenu(menu){const self=this;menu.activeClose?(menu.activeClose.click(),menu.activeExitFocus.focus()):menu.menuFunc(menu)},closeSubmenu(menu,submenu){const self=this;submenu.isOpen&&self.toggleSubmenu(menu,submenu)},checkIsBusy(){const self=this;let isRunning=!1;return self.menus.forEach(menu=>{self.actions.includes(menu.name)&&(isRunning=!0)}),isRunning},preventBodyScroll(){const body=document.body,self=this;let isOpen=!1;if(this.menus.forEach(menu=>{menu.isOpen&&(isOpen=!0)}),isOpen&&!body.classList.contains("prevent-body-scroll")){const scrollY=document.documentElement.style.getPropertyValue("--scroll-y");body.style.left="0",body.style.right="0",body.style.width="100%",body.style.position="fixed",body.style.top=`-${scrollY}`,body.classList.add("prevent-body-scroll")}else if(body.classList.contains("prevent-body-scroll")){const scrollY=body.style.top;body.style.top="",body.style.position="",window.scrollTo(0,-1*parseInt(scrollY||"0")),body.classList.remove("prevent-body-scroll")}},onInteraction(e){const self=this,isBusy=self.checkIsBusy();"click"!==e.type&&("keydown"!==e.type||9!=e.keyCode)||-1!==self.actions.indexOf("clicktab")||isBusy?"keydown"!==e.type||27!=e.keyCode||-1!==self.actions.indexOf("escape")||isBusy||(self.actions.push("escape"),setTimeout(()=>{self.loopMenus(self.closeOnEscPress,e),self.actions.splice(self.actions.indexOf("escape"),1)})):(self.actions.push("clicktab"),setTimeout(()=>{self.loopMenus(self.closeOnBlur,e),self.actions.splice(self.actions.indexOf("clicktab"),1)}))},calcTransition(obj){obj.container?(obj.transitionDelay=parseFloat(getComputedStyle(obj.container).transitionDelay),obj.transitionDuration=parseFloat(getComputedStyle(obj.container).transitionDuration)):(obj.transitionDelay=parseFloat(getComputedStyle(obj.list).transitionDelay),obj.transitionDuration=parseFloat(getComputedStyle(obj.list).transitionDuration))},getSubmenuParent(el){const parentSubmenu=el.parentElement.closest("[data-mh-submenu-list]");return parentSubmenu?parentSubmenu.dataset.mhSubmenuList:parentSubmenu},menuError(message){console.error(message),console.trace()},debounce(func,wait,immediate){var timeout;return function(){var context=this,args=arguments,later=function(){timeout=null,immediate||func.apply(context,args)},callNow=immediate&&!timeout;clearTimeout(timeout),timeout=setTimeout(later,wait),callNow&&func.apply(context,args)}}};